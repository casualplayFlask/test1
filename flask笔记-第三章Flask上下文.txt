Flask中有两种上下文：程序上下文和请求上下文
程序上下文：程序上下文中存储了程序运行所必须的信息。
请求上下文：包含了请求的各种信息，比如请求的URL，请求的HTTP方法等。


1，每一个视图函数都需要上下文信息，Flask将请求报文封装在request对象中，在Flask中，直接导入一个全局的request对象，然后再视图函数里直接调用request的属性获取
数据，PS：在全局导入时 request只是一个普通的Python对象，但在处理请求时，视图函数里的request就会自动包含对应请求的数据，因为Flask会在每个请求产生后自动激活
当前请求的上下文，激活请求上下文后，request被临时设为全局可访问。而当每个请求结束后，Flask就销毁对应的请求上下文。所以说，这里的request是全局对象，但这里的
“全局”并不是实际意义上的全局，我们可以把这些变量理解为动态的全局变量。

为了方便获取这两种上下文环境中存储的信息，Flask提供了四个上下文全局变量，如下：
变量名             上下文类别               说明
current_app     程序上下文              指向处理请求的当前程序实例
g                     程序上下文              替代Python的全局变量用法，确保仅在当前请求中可用。用于存储全局数据，每次请求都会重设
request           请求上下文               封装客户端发出的请求报文数据
session            请求上下文              用于记住请求之间的数据，，通过前面的Cookie实现

关于g这个程序上下文： 因为g存储在程序上下文中，而程序上下文会随着每一个请求的进入而激活，随着每一个请求的处理完毕而销毁，所以每次请求都会重设这个值。
通常，我们会使用g结合请求钩子来保存每个请求处理前所需要的全局变量，比如当前登录的用户对象，数据库连接等。如下：
@app.route('/hello')
def hello():
       name = request.args.get('name')
       .......
如果每个视图函数都需要这个值，那么就要在每个视图函数中重复这行代码。不过，借助g我们可以将这个操作移动到before_request处理函数中执行，然后保存到g的任意属性:
from flask import g
@app.before_request
def get_name():
      g.name = request.args.get('name')
设置这个函数后，在其他视图函数中可以直接使用g.name获取对应的值，另外，g也支持使用类似字典的get()，pop()以及setdefault()方法进行操作。

下面这些情况下，Flask会自动帮我们激活程序上下文：
a,当我们使用flask run命令启动程序时。
b,使用旧的app.run()方法启动程序时。
c,执行使用@app.cli.command()装饰器注册的flask命令时。
d,使用flask shell命令启动Python Shell时。

当请求上下文被激活时，程序上下文也被自动激活。当请求处理完毕后，请求上下文和程序上下文也会自动销毁，也就是说，在请求处理时这两者拥有相同的生命周期。

2，上下文钩子：Flask为上下文提供了一个teardown_appcontext钩子，使用它注册的回调函数会在程序上下文被销毁时调用，而且通常也会在请求上下文被销毁时调用。
@app.teardown_appcontext
def teardown_db(exception):
     ...
     db.close()
使用app.teardow_appcontext装饰器注册的回调函数需要接受异常对象作为参数，当请求被正常处理时这个参数值僵尸None，这个函数的返回值将被忽略。


3，获取上一个页面的URL，要重定向回上一个页面，最关键的是获取上一个页面的URL。常见的方式是在URL中手动加入包含当前页面URL的查询参数，
这个查询参数一般命名为next。比如，下面在foo和bar视图的返回值中的URL后添加next参数：
from flask import request
@app.route('/foo')
def foo():
    return '<h1>Foo page</h1><a href="%s">Do something and redirect</a>' % url_for('do_something', next=request.full_path)

@app.route('/bar')
def bar():
    return '<h1>Bar page</h1><a href="%s">Do something and redirect</a>' % url_for('do_something', next=request.full_path) #next这里获取到了bar的相对路径

在程序内部只需要使用相对URL，所以这里使用request.full_path获取当前页面的完整路径。在do_something视图中，我们获取这个next值，然后重定向到对应的路径：
return redirect（request.args.get（'next'））#当页面跳转(url_for)这里时，又会读取next的值就是上面bar的值，就会再次转回去

为了避免next参数为空的情况，我们也要添加备选项，如果为空就重定向到hello视图：
return redirect（request.args.get（'next'，url_for（'hello'）））

4，确保URL安全的关键就是判断URL是否属于程序内部，在代码清单2-9中，我们创建了一个URL验证函数is_safe_url（），用来验证next变量值是否属于程序内部URL。
from urlparse import urlparse, urljoin  # Python3需要从urllib.parse导入
from flask import request

def is_safe_url(target):
    ref_url = urlparse(request.host_url)
    test_url = urlparse(urljoin(request.host_url, target))
    return test_url.scheme in ('http', 'https') and \
           ref_url.netloc == test_url.netloc

这个函数接收目标URL作为参数，并通过request.host_url获取程序内的主机URL，然后使用urljoin（）函数将目标URL转换为绝对URL。
接着，分别使用urlparse模块提供的urlparse（）函数解析两个URL，最后对目标URL的URL模式和主机地址进行验证，确保只有属于程序内部的URL才会被返回。

在执行重定向回上一个页面的redirect_back（）函数中，我们使用is_safe_url（）验证next和referer的值：
def redirect_back(default='hello', **kwargs):
    for target in request.args.get('next'), request.referrer:
        if not target:
            continue
        if is_safe_url(target):
            return redirect(target)
    return redirect(url_for(default, **kwargs))


5，AJAX技术
以删除某个资源为例，在普通的程序中流程如下：
1）当“删除”按钮被单击时会发送一个请求，页面变空白，在接收到响应前无法进行其他操作。发送异步请求
2）服务器端接收请求，执行删除操作，返回包含整个页面的响应。
3）客户端接收到响应，重载整个页面。
使用AJAX技术时的流程如下：
1）当单击“删除”按钮时，客户端在后台发送一个异步请求，页面不变，在接收响应前可以进行其他操作。
2）服务器端接收请求后执行删除操作，返回提示消息或是无内容的204响应。
3）客户端接收到响应，使用JavaScript更新页面，移除资源对应的页面元素。

jQuery是流行的JavaScript库，它包装了JavaScript，让我们通过更简单的方式编写JavaScript代码。
对于AJAX，它提供了多个相关的方法，使用它可以很方便地实现AJAX操作。更重要的是，jQuery处理了不同浏览器的AJAX兼容问题，
我们只需要编写一套代码，就可以在所有主流的浏览器正常运行。


有些时候，程序中的某些接收AJAX请求的视图并不需要返回数据给客户端，比如用来删除文章的视图。这时我们可以直接返回空值，
并将状态码指定为204（表示无内容），比如：
@app.route('/post/delete/<int:post_id>', methods=['DELETE'])
def delete_post(post_id):
    ...
    return '', 204

异步加载长文章示例
在示例程序的对应页面中，我们将显示一篇很长的虚拟文章，文章正文下方有一个“加载更多”按钮，当加载按钮被单击时，会发送一个AJAX请求获取
文章的更多内容并直接动态插入到文章下方。如下：
from jinja2.utils import generate_lorem_ipsum

@app.route('/post')
def show_post():
    post_body = generate_lorem_ipsum(n=2)  # 生成两段随机文本
    return '''
<h1>A very long post</h1>
<div class="body">%s</div>
<button id="load">Load More</button>
<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
<script type="text/javascript">
$(function() {
    $('#load').click(function() {
        $.ajax({
            url: '/more',                       // 目标URL
            type: 'get',                        // 请求方法
            success: function(data){    // 返回2XX响应后触发的回调函数
                $('.body').append(data);        // 将返回的响应插入到页面中
            }
        })
    })
})
</script>''' % post_body

文章的随机正文通过Jinja2提供的generate_lorem_ipsum（）函数生成，n参数用来指定段落的数量，默认为5，它会返回由随机字符组成的虚拟文章。
文章下面添加了一个“加载更多”按钮。按钮下面是两个<script></script>代码块，第一个script从CDN加载jQuery资源。
在第二个script标签中，我们在代码的最外层创建了一个$（function（）{...}）函数，这个函数是常见的$（document）.ready（function（）{...}）函数的简写形式。
这个函数用来在页面DOM加载完毕后执行代码，类似传统JavaScript中的window.onload方法，所以我们通常会将代码包装在这个函数中。美元符号是jQuery的简写，
我们通过它来调用jQuery提供的多个方法，所以$.ajax（）等同于jQuery.ajax（）。
在$（function（）{...}）中，$（'#load'）被称为选择器，我们在括号中传入目标元素的id、class或是其他属性来定位到对应的元素，将其创建为jQuery对象。
我们传入了“加载更多”按钮的id值以定位到加载按钮。在这个选择器上，我们附加了.click（function（）{...}），这会为加载按钮注册一个单击事件处理函数，
当加载按钮被单击时就会执行单击事件回调函数。在这个回调函数中，我们使用$.ajax（）方法发送一个AJAX请求到服务器，通过url将目标URL设为“/more”，
通过type参数将请求的类型设为GET。当请求成功处理并返回2XX响应时（另外还包括304响应），会触发success回调函数。
success回调函数接收的第一个参数为服务器端返回的响应主体，在这个回调函数中，我们在文章正文（通过$（'.body'）选择）
底部使用append（）方法插入返回的dat数据。


more视图函数会返回随机文章正文：
@app.route('/more')
def load_post():
    return generate_lorem_ipsum(n=1)



6，我们可以使用Jinja2提供的escape（）函数对用户传入的数据进行转义：（为了防范攻击，进行转义）
from jinja2 import escape

@app.route('/hello')
def hello():
    name = request.args.get('name')
    response = '<h1>Hello, %s!</h1>' % escape(name)

在普通的Web程序中，一般只会使用到GET和POST方法。而且，目前在HTML中仅支持GET和POST方法（借助AJAX则可以使用其他方法）。
·GET方法属于安全方法，不会改变资源状态，仅用于获取资源，因此又被称为幂等方法（idempotent method）。页面中所有可以通过链接发起的请求都属于GET请求。
·POST方法用于创建、修改和删除资源。在HTML中使用form标签创建表单并设置提交方法为POST，在提交时会创建POST请求。
☆附注　在GET请求中，查询参数用来传入过滤返回的资源，但是在某些特殊情况下，也可以通过查询参数传递少量非敏感信息。

在计算机语境中，令牌（token）指用于标记、验证和传递信息的字符，通常是通过一定算法生成的伪随机数。


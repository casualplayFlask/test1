1，HTML表单
在HTML中，表单通过<form>标签创建，表单中的字段使用<input>标签定义。下面是一个非常简单的HTML表单：
<form method="post">
    <label for="username">Username</label><br>
    <input type="text" name="username" placeholder="Héctor Rivera"><br>
    <label for="password">Password</label><br>
    <input type="password" name="password" placeholder="19001130"><br>
    <input id="remember" name="remember" type="checkbox" checked>
    <label for="remember"><small>Remember me</small></label><br>
    <input type="submit" name="submit" value="Log in">
</form>

在HTML表单中，我们创建<input>标签表示各种输入字段，<label>标签则用来定义字段的标签文字。
我们可以在<form>和<input>标签中使用各种属性来对表单进行设置。上面的表单被浏览器解析后会生成两个输入框，一个勾选框和一个提交按钮。

☆附注　关于HTML表单的具体定义和用法可以访问https://www.w3.org/TR/html401/interact/forms.html查看。

WTForms支持在Python中使用类定义表单，然后直接通过类定义生成对应的HTML代码，这种方式更加方便，而且使表单更易于重用。
因此，除非是非常简单的程序，或者是你想让表单的定义更加灵活，否则我们一般不会在模板中直接使用HTML编写表单。


2，使用Flask-WTF处理表单
Flask-WTF默认为每个表单启用CSRF保护，它会为我们自动生成和验证CSRF令牌。默认情况下，Flask-WTF使用程序密钥来对CSRF令牌进行签名，
所以我们需要为程序设置密钥：app.secret_key='secret string'

定义WTForms表单类：
当使用WTForms创建表单时，表单由Python类表示，这个类继承从WTForms导入的Form基类。
一个表单由若干个输入字段组成，这些字段分别用表单类的类属性来表示（字段即Field，你可以简单理解为表单内的输入框、按钮等部件）。
下面定义了一个LoginForm类，最终会生成我们在前面定义的HTML表单：代码在forms.py中
每个字段属性通过实例化WTForms提供的字段类表示。字段属性的名称将作为对应HTML<input>元素的name属性及id属性值。
***注意：字段属性名称大小写敏感，不能以下划线或validate开头。
这里的LoginForm表单类中定义了四个字段：文本字段StringField、密码字段Password Field、勾选框字段BooleanField和提交按钮字段SubmitField。
字段类从wtforms包导入，常用的WTForms字段如下：
字段类		    说明					对应的HTML表示
BooleanField	    复选框，值会被处理为True或False		<input type="checkbox">
DateField		    文本字段，值会被处理为datetime.date对象	<input type="text">
DateTimeField	    文本字段，值会被处理为datetime.datetime对象	<input type="text">
FileField		    文件上传字段				<input type="file">
FloatField		    浮点数字段，值会被处理为浮点型		<input type="text">
IntegerField	    整数字段，值会被处理为整型			<input type="text">
RadioField		    一组单选按钮				<input type="radio">
SelectField	    下拉列表				<select><option></option></select>
SelectMultipleField       多选下来列表				<select multiple><option></option></select>
SubmitField 	    提交按钮				<input type="submit">
StringField	    文本字段				<input type="text">
HiddenField	    隐藏文本字段				<input type="hidden">
PasswordField	    密码文本字段				<input type="password">
TextAreaField	    多行文本字段				<textarea></textarea>


通过实例化字段类时传入的参数，我们可以对字段进行设置，字段类构造方法接收的常用参数如下：
参数	   说明
label	   字段标签<label>的值，也就是渲染后显示在输入字段前的文字
render_kw	   一个字典，用来设置对应的HTML<input>标签的属性，比如传入{'placeholder':'Your Name'}，渲染后的HTML代码将会<input>标签的placeholder属性设为You Name
validators	   一个列表，包含一些列验证器，会在表单提交后被逐一调用验证表单数据
default	   字符串或可调用对象，用来为表单字段设置默认值

在WTForms中，验证器（validator）是一系列用于验证字段数据的类，我们在实例化字段类时使用validators关键字来指定附加的验证器列表。
验证器从wtforms.validators模块中导入，常用的验证器可在test1文件夹中的WTform验证器1，2图中查看

注意　validators参数接收一个传入可调用对象组成的列表。内置的验证器使用实现了__call__（）方法的类表示，所以我们需要在验证器后添加括号。

在username和password字段里，我们都使用了DataRequired验证器，用来验证输入的数据是否有效。
另外，password字段里还添加了一个Length验证器，用来验证输入的数据长度是否在给定的范围内。
验证器的第一个参数一般为错误提示消息，我们可以使用message关键字传递参数，通过传入自定义错误信息来覆盖内置消息，比如：
name = StringField('Your Name', validators=[DataRequired(message=u'名字不能为空！')])

Flask-WTF定义方式：当使用Flask-WTF定义表单时，我们仍然使用WTForms提供的字段类和验证器，创建的方式也完全相同，
只不过表单类要继承Flask-WTF提供的FlaskForm类。FlaskForm类继承自Form类，进行了一些设置，并附加了一些辅助方法，以便与Flask集成。

因为本章的示例程序中包含多个表单类，为了便于组织，我们创建了一个forms.py脚本，用来存储所有的表单类。
以下是是继承FlaskForm类的LoginForm表单：
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, BooleanField, SubmitField
from wtforms.validators import DataRequired, Length

class LoginForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired()])
    password = PasswordField('Password', validators=[DataRequired(), Length(8, 128)])
    remember = BooleanField('Remember me')
    submit = SubmitField('Log in')



3，输出HTML代码
以我们使用WTForms创建的LoginForm为例，实例化表单类，然后将实例属性转换成字符串或直接调用就可以获取表单字段对应的HTML代码：
>>> form = LoginForm()
>>> form.username()
u'<input id="username" name="username" type="text" value="">'
>>> form.submit()
u'<input id="submit" name="submit" type="submit" value="Submit">'

字段的<label>元素的HTML代码则可以通过“form.字段名.label”的形式获取：
>>> form.username.label()
u'<label for="username">Username</label>'
>>> form.submit.label()
u'<label for="submit">Submit</label>'

在创建HTML表单时，我们经常会需要使用HTML<input>元素的其他属性来对字段进行设置。
比如，添加class属性设置对应的CSS类为字段添加样式；添加placeholder属性设置占位文本。
默认情况下，WTForms输出的字段HTML代码只会包含id和name属性，属性值均为表单类中对应的字段属性名称。如果要添加额外的属性，通常有两种方法：
1）使用render_kw属性
比如下面为username字段使用render_kw设置了placeholder HTML属性：
username = StringField('Username', render_kw={'placeholder': 'Your Username'})

这个字段被调用后输出的HTML代码如下所示：
<input type="text" id="username" name="username" placeholder="Your Username">

2）在调用字段时传入
在调用字段属性时，通过添加括号使用关键字参数的形式也可以传入字段额外的HTML属性：
>>> form.username(style='width: 200px;', class_='bar')
u'<input class="bar" id="username" name="username" style="width: 200px;" type="text">'

☆附注　class是Python的保留关键字，在这里我们使用class_来代替class，渲染后的<input>会获得正确的class属性，在模板中调用时则可以直接使用class。
注意:通过上面的方法也可以修改id和name属性，但表单被提交后，WTForms需要通过name属性来获取对应的数据，所以不能修改name属性值。（一旦表单提交后则不能修改）


4，在模板中渲染表单
为了能够在模板中渲染表单，我们需要把表单类实例传入模板。
首先在视图函数里实例化表单类LoginForm，然后在render_template（）函数中使用关键字参数form将表单实例传入模板，如下：
from forms import LoginForm

@app.route('/basic')
def basic():
    form = LoginForm()
    return render_template('basic.html', form=form)


在模板中，只需要调用表单类的属性即可获取字段对应的HTML代码，如果需要传入参数，也可以添加括号，如下：
<form method="post">
    {{ form.csrf_token }} <!-- 渲染CSRF令牌隐藏字段 -->
    {{ form.username.label }}<br>{{ form.username }}<br>
    {{ form.password.label }}<br>{{ form.password }}<br>
    {{ form.remember }}{{ form.remember.label }}<br>
    {{ form.submit }}<br>
</form>

需要注意的是，在上面的代码中，除了渲染各个字段的标签和字段本身，我们还调用了form.csrf_token属性渲染Flask-WTF为表单类自动创建的CSRF令牌字段。
form.csrf_token字段包含了自动生成的CSRF令牌值，在提交表单后会自动被验证，为了确保表单通过验证，我们必须在表单中手动渲染这个字段。

提示　Flask-WTF为表单类实例提供了一个form.hidden_tag（）方法，这个方法会依次渲染表单中所有的隐藏字段。
因为csrf_token字段也是隐藏字段，所以当这个方法被调用时也会渲染csrf_token字段。
渲染后获得的实际HTML代码如下所示：
<form method="post">
    <input id="csrf_token" name="csrf_token" type="hidden" value="IjVmMDE1ZmFjM2VjYmZjY...i.DY1QSg.IWc1WEWxr3TvmAWCTHRMGjIcDOQ">
    <label for="username">Username</label><br>
    <input id="username" name="username" type="text" value=""><br>
    <label for="password">Password</label><br>
    <input id="password" name="password" type="password" value=""><br>
    <input id="remember" name="remember" type="checkbox" value="y"><label for="remember">Remember me</label><br>
    <input id="submit" name="submit" type="submit" value="Log in"><br>
</form>

使用render_kw字典或是在调用字段时传入参数来定义字段的额外HTML属性，通过这种方式添加CSS类，我们可以编写一个Bootstrap风格的表单，如下：
<form method="post">
    {{ form.csrf_token }}
    <div class="form-group">
       {{ form.username.label }}
       {{ form.username(class='form-control') }}
    </div>
    <div class="form-group">
        {{ form.password.label }}
        {{ form.password(class='form-control') }}
    </div>
    <div class="form-check">
        {{ form.remember(class='form-check-input') }}
        {{ form.remember.label }}
    </div>
    {{ form.submit(class='btn btn-primary') }}
    </form>

5，处理表单数据
表单数据的处理涉及很多内容，除去表单提交不说，从获取数据到保存数据大致会经历以下步骤：
1）解析请求，获取表单数据。
2）对数据进行必要的转换，比如将勾选框的值转换成Python的布尔值。
3）验证数据是否符合要求，同时验证CSRF令牌。
4）如果验证未通过则需要生成错误消息，并在模板中显示错误消息。
5）如果通过验证，就把数据保存到数据库或做进一步处理。
除非是简单的程序，否则手动处理不太现实，使用Flask-WTF和WTForms可以极大地简化这些步骤。

6，提交表单
在HTML中，当<form>标签声明的表单中类型为submit的提交字段被单击时，就会创建一个提交表单的HTTP请求，请求中包含表单各个字段的数据。
表单的提交行为主要由三个属性控制，如下：
属性	默认值				说明
action	当前URL，即页面对应的URL		表单提交时发送请求的目标URL
method	get				提交表单的HTTP请求方法，目前仅支持使用GET和POST方法
enctype	application/x-www-form-urlencoded	表单数据的编码类型，当表单中包含文件上传字段时，需要设为multipart/form-data，还可以设为纯文本类型text/plain

form标签的action属性用来指定表单被提交的目标URL，默认为当前URL，也就是渲染该模板的路由所在的URL。如果你要把表单数据发送到其他URL，可以自定义这个属性值
当使用GET方法提交表单数据时，表单的数据会以查询字符串的形式附加在请求的URL里，比如：http://localhost:5000/basic?username=greyli&password=12345

GET方式仅适用于长度不超过2000个字符，且不包含敏感信息的表单。
因为这种方式会直接将用户提交的表单数据暴露在URL中，容易被攻击者截获，示例中的情况明显是危险的。因此，出于安全的考虑，我们一般使用POST方法提交表单。
使用POST方法时，按照默认的编码类型，表单数据会被存储在请求主体中。

Flask为路由设置默认监听的HTTP方法为GET。为了支持接收表单提交发送的POST请求，
我们必须在app.route（）装饰器里使用methods关键字为路由指定HTTP方法，如下：
@app.route('/basic', methods=['GET', 'POST'])
def basic():
    form = LoginForm()
    return render_template('basic.html', form=form)


7，验证表单数据
1）客户端验证和服务器端验证
表单的验证通常分为以下两种形式：
（1）客户端验证
客户端验证（client side validation）是指在客户端（比如Web浏览器）对用户的输入值进行验证。
比如，使用HTML5内置的验证属性即可实现基本的客户端验证（type、required、min、max、accept等）。比如，下面的username字段添加了required标志：
<input type="text" name="username" required>
如果用户没有输入内容而按下提交按钮，会弹出浏览器内置的错误提示

和其他附加HTML属性相同，我们可以在定义表单时通过render_kw传入这些属性，或是在渲染表单时传入。
像required这类布尔值属性，值可以为空或是任意ASCII字符，比如：{{ form.username(required='') }}

客户端方式可以实时动态提示用户输入是否正确，只有用户输入正确后才会将表单数据发送到服务器。客户端验证可以增强用户体验，降低服务器负载。

（2）服务器端验证
服务器端验证（server side validation）是指用户把输入的数据提交到服务器端，在服务器端对数据进行验证。
如果验证出错，就在返回的响应中加入错误信息。用户修改后再次提交表单，直到通过验证。我们在Flask程序中使用WTForms实现的就是服务器端验证。

2）WTForms验证机制




















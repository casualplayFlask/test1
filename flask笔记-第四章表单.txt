1，HTML表单
在HTML中，表单通过<form>标签创建，表单中的字段使用<input>标签定义。下面是一个非常简单的HTML表单：
<form method="post">
    <label for="username">Username</label><br>
    <input type="text" name="username" placeholder="Héctor Rivera"><br>
    <label for="password">Password</label><br>
    <input type="password" name="password" placeholder="19001130"><br>
    <input id="remember" name="remember" type="checkbox" checked>
    <label for="remember"><small>Remember me</small></label><br>
    <input type="submit" name="submit" value="Log in">
</form>

在HTML表单中，我们创建<input>标签表示各种输入字段，<label>标签则用来定义字段的标签文字。
我们可以在<form>和<input>标签中使用各种属性来对表单进行设置。上面的表单被浏览器解析后会生成两个输入框，一个勾选框和一个提交按钮。

☆附注　关于HTML表单的具体定义和用法可以访问https://www.w3.org/TR/html401/interact/forms.html查看。

WTForms支持在Python中使用类定义表单，然后直接通过类定义生成对应的HTML代码，这种方式更加方便，而且使表单更易于重用。
因此，除非是非常简单的程序，或者是你想让表单的定义更加灵活，否则我们一般不会在模板中直接使用HTML编写表单。


2，使用Flask-WTF处理表单
Flask-WTF默认为每个表单启用CSRF保护，它会为我们自动生成和验证CSRF令牌。默认情况下，Flask-WTF使用程序密钥来对CSRF令牌进行签名，
所以我们需要为程序设置密钥：app.secret_key='secret string'

定义WTForms表单类：
当使用WTForms创建表单时，表单由Python类表示，这个类继承从WTForms导入的Form基类。
一个表单由若干个输入字段组成，这些字段分别用表单类的类属性来表示（字段即Field，你可以简单理解为表单内的输入框、按钮等部件）。
下面定义了一个LoginForm类，最终会生成我们在前面定义的HTML表单：代码在forms.py中
每个字段属性通过实例化WTForms提供的字段类表示。字段属性的名称将作为对应HTML<input>元素的name属性及id属性值。
***注意：字段属性名称大小写敏感，不能以下划线或validate开头。
这里的LoginForm表单类中定义了四个字段：文本字段StringField、密码字段Password Field、勾选框字段BooleanField和提交按钮字段SubmitField。
字段类从wtforms包导入，常用的WTForms字段如下：
字段类		    说明					对应的HTML表示
BooleanField	    复选框，值会被处理为True或False		<input type="checkbox">
DateField		    文本字段，值会被处理为datetime.date对象	<input type="text">
DateTimeField	    文本字段，值会被处理为datetime.datetime对象	<input type="text">
FileField		    文件上传字段				<input type="file">
FloatField		    浮点数字段，值会被处理为浮点型		<input type="text">
IntegerField	    整数字段，值会被处理为整型			<input type="text">
RadioField		    一组单选按钮				<input type="radio">
SelectField	    下拉列表				<select><option></option></select>
SelectMultipleField       多选下来列表				<select multiple><option></option></select>
SubmitField 	    提交按钮				<input type="submit">
StringField	    文本字段				<input type="text">
HiddenField	    隐藏文本字段				<input type="hidden">
PasswordField	    密码文本字段				<input type="password">
TextAreaField	    多行文本字段				<textarea></textarea>


通过实例化字段类时传入的参数，我们可以对字段进行设置，字段类构造方法接收的常用参数如下：
参数	   说明
label	   字段标签<label>的值，也就是渲染后显示在输入字段前的文字
render_kw	   一个字典，用来设置对应的HTML<input>标签的属性，比如传入{'placeholder':'Your Name'}，渲染后的HTML代码将会<input>标签的placeholder属性设为You Name
validators	   一个列表，包含一些列验证器，会在表单提交后被逐一调用验证表单数据
default	   字符串或可调用对象，用来为表单字段设置默认值

在WTForms中，验证器（validator）是一系列用于验证字段数据的类，我们在实例化字段类时使用validators关键字来指定附加的验证器列表。
验证器从wtforms.validators模块中导入，常用的验证器可在test1文件夹中的WTform验证器1，2图中查看

注意　validators参数接收一个传入可调用对象组成的列表。内置的验证器使用实现了__call__（）方法的类表示，所以我们需要在验证器后添加括号。

在username和password字段里，我们都使用了DataRequired验证器，用来验证输入的数据是否有效。
另外，password字段里还添加了一个Length验证器，用来验证输入的数据长度是否在给定的范围内。
验证器的第一个参数一般为错误提示消息，我们可以使用message关键字传递参数，通过传入自定义错误信息来覆盖内置消息，比如：
name = StringField('Your Name', validators=[DataRequired(message=u'名字不能为空！')])

Flask-WTF定义方式：当使用Flask-WTF定义表单时，我们仍然使用WTForms提供的字段类和验证器，创建的方式也完全相同，
只不过表单类要继承Flask-WTF提供的FlaskForm类。FlaskForm类继承自Form类，进行了一些设置，并附加了一些辅助方法，以便与Flask集成。

因为本章的示例程序中包含多个表单类，为了便于组织，我们创建了一个forms.py脚本，用来存储所有的表单类。
以下是是继承FlaskForm类的LoginForm表单：
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, BooleanField, SubmitField
from wtforms.validators import DataRequired, Length

class LoginForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired()])
    password = PasswordField('Password', validators=[DataRequired(), Length(8, 128)])
    remember = BooleanField('Remember me')
    submit = SubmitField('Log in')



3，输出HTML代码
以我们使用WTForms创建的LoginForm为例，实例化表单类，然后将实例属性转换成字符串或直接调用就可以获取表单字段对应的HTML代码：
>>> form = LoginForm()
>>> form.username()
u'<input id="username" name="username" type="text" value="">'
>>> form.submit()
u'<input id="submit" name="submit" type="submit" value="Submit">'

字段的<label>元素的HTML代码则可以通过“form.字段名.label”的形式获取：
>>> form.username.label()
u'<label for="username">Username</label>'
>>> form.submit.label()
u'<label for="submit">Submit</label>'

在创建HTML表单时，我们经常会需要使用HTML<input>元素的其他属性来对字段进行设置。
比如，添加class属性设置对应的CSS类为字段添加样式；添加placeholder属性设置占位文本。
默认情况下，WTForms输出的字段HTML代码只会包含id和name属性，属性值均为表单类中对应的字段属性名称。如果要添加额外的属性，通常有两种方法：
1）使用render_kw属性
比如下面为username字段使用render_kw设置了placeholder HTML属性：
username = StringField('Username', render_kw={'placeholder': 'Your Username'})

这个字段被调用后输出的HTML代码如下所示：
<input type="text" id="username" name="username" placeholder="Your Username">

2）在调用字段时传入
在调用字段属性时，通过添加括号使用关键字参数的形式也可以传入字段额外的HTML属性：
>>> form.username(style='width: 200px;', class_='bar')
u'<input class="bar" id="username" name="username" style="width: 200px;" type="text">'

☆附注　class是Python的保留关键字，在这里我们使用class_来代替class，渲染后的<input>会获得正确的class属性，在模板中调用时则可以直接使用class。
注意:通过上面的方法也可以修改id和name属性，但表单被提交后，WTForms需要通过name属性来获取对应的数据，所以不能修改name属性值。（一旦表单提交后则不能修改）


4，在模板中渲染表单
为了能够在模板中渲染表单，我们需要把表单类实例传入模板。
首先在视图函数里实例化表单类LoginForm，然后在render_template（）函数中使用关键字参数form将表单实例传入模板，如下：
from forms import LoginForm

@app.route('/basic')
def basic():
    form = LoginForm()
    return render_template('basic.html', form=form)


在模板中，只需要调用表单类的属性即可获取字段对应的HTML代码，如果需要传入参数，也可以添加括号，如下：
<form method="post">
    {{ form.csrf_token }} <!-- 渲染CSRF令牌隐藏字段 -->
    {{ form.username.label }}<br>{{ form.username }}<br>
    {{ form.password.label }}<br>{{ form.password }}<br>
    {{ form.remember }}{{ form.remember.label }}<br>
    {{ form.submit }}<br>
</form>

需要注意的是，在上面的代码中，除了渲染各个字段的标签和字段本身，我们还调用了form.csrf_token属性渲染Flask-WTF为表单类自动创建的CSRF令牌字段。
form.csrf_token字段包含了自动生成的CSRF令牌值，在提交表单后会自动被验证，为了确保表单通过验证，我们必须在表单中手动渲染这个字段。

提示　Flask-WTF为表单类实例提供了一个form.hidden_tag（）方法，这个方法会依次渲染表单中所有的隐藏字段。
因为csrf_token字段也是隐藏字段，所以当这个方法被调用时也会渲染csrf_token字段。
渲染后获得的实际HTML代码如下所示：
<form method="post">
    <input id="csrf_token" name="csrf_token" type="hidden" value="IjVmMDE1ZmFjM2VjYmZjY...i.DY1QSg.IWc1WEWxr3TvmAWCTHRMGjIcDOQ">
    <label for="username">Username</label><br>
    <input id="username" name="username" type="text" value=""><br>
    <label for="password">Password</label><br>
    <input id="password" name="password" type="password" value=""><br>
    <input id="remember" name="remember" type="checkbox" value="y"><label for="remember">Remember me</label><br>
    <input id="submit" name="submit" type="submit" value="Log in"><br>
</form>

使用render_kw字典或是在调用字段时传入参数来定义字段的额外HTML属性，通过这种方式添加CSS类，我们可以编写一个Bootstrap风格的表单，如下：
<form method="post">
    {{ form.csrf_token }}
    <div class="form-group">
       {{ form.username.label }}
       {{ form.username(class='form-control') }}
    </div>
    <div class="form-group">
        {{ form.password.label }}
        {{ form.password(class='form-control') }}
    </div>
    <div class="form-check">
        {{ form.remember(class='form-check-input') }}
        {{ form.remember.label }}
    </div>
    {{ form.submit(class='btn btn-primary') }}
    </form>

5，处理表单数据
表单数据的处理涉及很多内容，除去表单提交不说，从获取数据到保存数据大致会经历以下步骤：
1）解析请求，获取表单数据。
2）对数据进行必要的转换，比如将勾选框的值转换成Python的布尔值。
3）验证数据是否符合要求，同时验证CSRF令牌。
4）如果验证未通过则需要生成错误消息，并在模板中显示错误消息。
5）如果通过验证，就把数据保存到数据库或做进一步处理。
除非是简单的程序，否则手动处理不太现实，使用Flask-WTF和WTForms可以极大地简化这些步骤。

6，提交表单
在HTML中，当<form>标签声明的表单中类型为submit的提交字段被单击时，就会创建一个提交表单的HTTP请求，请求中包含表单各个字段的数据。
表单的提交行为主要由三个属性控制，如下：
属性	默认值				说明
action	当前URL，即页面对应的URL		表单提交时发送请求的目标URL
method	get				提交表单的HTTP请求方法，目前仅支持使用GET和POST方法
enctype	application/x-www-form-urlencoded	表单数据的编码类型，当表单中包含文件上传字段时，需要设为multipart/form-data，还可以设为纯文本类型text/plain

form标签的action属性用来指定表单被提交的目标URL，默认为当前URL，也就是渲染该模板的路由所在的URL。如果你要把表单数据发送到其他URL，可以自定义这个属性值
当使用GET方法提交表单数据时，表单的数据会以查询字符串的形式附加在请求的URL里，比如：http://localhost:5000/basic?username=greyli&password=12345

GET方式仅适用于长度不超过2000个字符，且不包含敏感信息的表单。
因为这种方式会直接将用户提交的表单数据暴露在URL中，容易被攻击者截获，示例中的情况明显是危险的。因此，出于安全的考虑，我们一般使用POST方法提交表单。
使用POST方法时，按照默认的编码类型，表单数据会被存储在请求主体中。

Flask为路由设置默认监听的HTTP方法为GET。为了支持接收表单提交发送的POST请求，
我们必须在app.route（）装饰器里使用methods关键字为路由指定HTTP方法，如下：
@app.route('/basic', methods=['GET', 'POST'])
def basic():
    form = LoginForm()
    return render_template('basic.html', form=form)


7，验证表单数据
1）客户端验证和服务器端验证
表单的验证通常分为以下两种形式：
（1）客户端验证
客户端验证（client side validation）是指在客户端（比如Web浏览器）对用户的输入值进行验证。
比如，使用HTML5内置的验证属性即可实现基本的客户端验证（type、required、min、max、accept等）。比如，下面的username字段添加了required标志：
<input type="text" name="username" required>
如果用户没有输入内容而按下提交按钮，会弹出浏览器内置的错误提示

和其他附加HTML属性相同，我们可以在定义表单时通过render_kw传入这些属性，或是在渲染表单时传入。
像required这类布尔值属性，值可以为空或是任意ASCII字符，比如：{{ form.username(required='') }}

客户端方式可以实时动态提示用户输入是否正确，只有用户输入正确后才会将表单数据发送到服务器。客户端验证可以增强用户体验，降低服务器负载。

（2）服务器端验证
服务器端验证（server side validation）是指用户把输入的数据提交到服务器端，在服务器端对数据进行验证。
如果验证出错，就在返回的响应中加入错误信息。用户修改后再次提交表单，直到通过验证。我们在Flask程序中使用WTForms实现的就是服务器端验证。

2）WTForms验证机制
WTForms验证表单字段的方式是在实例化表单类时传入表单数据，然后对表单实例调用validate（）方法。
这会逐个对字段调用字段实例化时定义的验证器，返回表示验证结果的布尔值。
如果验证失败，就把错误消息存储到表单实例的errors属性对应的字典中，验证的过程如下所示：
>>> from wtforms import Form, StringField, PasswordField, BooleanField 
>>> from wtforms.validators import DataRequired, Length                
>>> class LoginForm(Form):                                             
...     username = StringField('Username', validators=[DataRequired()])
...     password = PasswordField('Password', validators=[DataRequired()
, Length(8, 128)])
>>> form = LoginForm(username='', password='123')                      
>>> form.data  # 表单数据字典
{'username': '', 'password': '123'}
>>> form.validate()
False
>>> form.errors  # 错误消息字典
{'username': [u'This field is required.'], 'password': [u'Field must be
 at least 8 characters long.']}
>>> form2 = LoginForm(username='greyli', password='12345678')            
>>> form2.data
{'username': 'greyli', 'password': '12345678'}
>>> form2.validate()
True
>>> form2.errors
{}

因为我们的表单使用POST方法提交，如果单纯使用WTForms，我们在实例化表单类时需要首先把request.form传入表单类，而使用Flask-WTF时，
表单类继承的FlaskForm基类默认会从request.form获取表单数据，所以不需要手动传入。

***提示　使用POST方法提交的表单，其数据会被Flask解析为一个字典，可以通过请求对象的form属性获取（request.form）；
使用GET方法提交的表单的数据同样会被解析为字典，不过要通过请求对象的args属性获取（request.args）。



3）在视图函数中验证表单
因为现在的basic视图同时接收两种类型的请求：GET请求和POST请求。所以我们要根据请求方法的不同执行不同的代码。
具体来说：首先是实例化表单，如果是GET请求，那么就渲染模板；如果是POST请求，就调用validate（）方法验证表单数据。
请求的HTTP方法可以通过request.method属性获取，我们可以使用下面的方式来组织视图函数：
from flask import request
...
@app.route('/basic', methods=['GET', 'POST'])
def basic():
    form = LoginForm()  # GET + POST
    if request.method == 'POST' and form.validate():  #注意:因为WTForms会自动对CSRF令牌字段进行验证，如果没有渲染该字段会导致验证出错，错误消息为“CSRF token is missing”。
        ...  # 处理POST请求
    return render_template('basic.html', form=form)  # 处理GET请求

其中的if语句等价于：
if 用户提交表单 and 数据通过验证:
    获取表单数据并保存

当请求方法是GET时，会跳过这个if语句，渲染basic.html模板；当请求的方法是POST时（说明用户提交了表单），则验证表单数据。
这会逐个字段（包括CSRF令牌字段）调用附加的验证器进行验证。

Flask-WTF提供的validate_on_submit（）方法合并了这两个操作，因此上面的代码可以简化为：
@app.route('/basic', methods=['GET', 'POST'])
def basic():
    form = LoginForm()
    if form.validate_on_submit():
        ... 
    return render_template('basic.html', form=form)

☆附注　除了POST方法，如果请求的方法是PUT、PATCH和DELETE方法，form.validate_on_submit（）也会验证表单数据。

如果form.validate_on_submit（）返回True，则表示用户提交了表单，且表单通过验证，那么我们就可以在这个if语句内获取表单数据，如下代码所示：
from flask import Flask, render_template, redirect, url_for, flash
...
@app.route('/basic', methods=['GET', 'POST'])
def basic():
    form = LoginForm()
    if form.validate_on_submit():
        username = form.username.data
        flash('Welcome home, %s!' % username)
        return redirect(url_for('index'))
    return render_template('basic.html', form=form)

表单类的data属性是一个匹配所有字段与对应数据的字典，我们一般直接通过“form.字段属性名.data”的形式来获取对应字段的数据。
例如，form.username.data返回username字段的值。
在上述代码中，当表单验证成功后，我们获取了username字段的数据，然后用来发送一条flash消息，最后将程序重定向到index视图。
***提示：表单的数据一般会存储到数据库中，这是我们下一章要学习的内容。这里仅仅将数据填充到flash（）函数里。

在这个if语句内，如果不使用重定向的话，当if语句执行完毕后会继续执行最后的render_template（）函数渲染模板，最后像往常一样返回一个常规的200响应，
但这会造成一个问题：
在浏览器中，当单击F5刷新/重载时的默认行为是发送上一个请求。如果上一个请求是POST请求，那么就会弹出一个确认窗口，询问用户是否再次提交表单。
为了避免出现这个容易让人产生困惑的提示，我们尽量不要让提交表单的POST请求作为最后一个请求。这就是为什么我们在处理表单后返回一个重定向响应，
这会让浏览器重新发送一个新的GET请求到重定向的目标URL。
最终，最后一个请求就变成了GET请求。这种用来防止重复提交表单的技术称为PRG（Post/Redirect/Get）模式，
即通过对提交表单的POST请求返回重定向响应将最后一个请求转换为GET请求。


4）在模板中渲染错误消息
如果form.validate_on_submit（）返回False，那么说明验证没有通过。对于验证未通过的字段，
WTForms会把错误消息添加到表单类的errors属性中，这是一个匹配作为表单字段的类属性到对应的错误消息列表的字典。
我们一般会直接通过字段名来获取对应字段的错误消息列表，即“form.字段名.errors”。比如，form.name.errors返回name字段的错误消息列表。
像第2章渲染flash（）消息一样，我们可以在模板里使用for循环迭代错误消息列表，如代码：
<form method="post">
    {{ form.csrf_token }}
    {{ form.username.label }}<br>
    {{ form.username }}<br>
    {% for message in form.username.errors %}
        <small class="error">{{ message }}</small><br>
    {% endfor %}
    {{ form.password.label }}<br>
    {{ form.password }}<br>
    {% for message in form.password.errors %}
        <small class="error">{{ message }}</small><br>
    {% endfor %}
    {{ form.remember }}{{ form.remember.label }}<br>
    {{ form.submit }}<br>
</form>

提示1:在使用DataRequired和InputRequired验证器时，WTForms会在字段输出的HTML代码中添加required属性，所以会弹出浏览器内置的错误提示。
同时，WTForms也会在表单字段的flags属性添加required标志（比如form.username.flags.required），
所以我们可以在模板中通过这个标志值来判断是否在字段文本中添加一个*号或文字标注，以表示必填项。

提示2:InputRequired验证器和DataRequired很相似，但InputRequired仅验证用户是否有输入，而不管输入的值是否有效。
例如，由空格组成的数据也会通过验证。当使用DataRequired时，如果用户输入的数据不符合字段要求，比如在IntegerField输入非数字时会视为未输入，而不是类型错误。

完整的表单处理过程的流程图如图在文件夹中的图库中保存，可查看



5）使用宏渲染表单
在模板中渲染表单时，我们有大量的工作要做：
·调用字段属性，获取<input>定义。
·调用对应的label属性，获取<label>定义。
·渲染错误消息。

为了避免为每一个字段重复这些代码，我们可以创建一个宏来渲染表单字段，如代码：
{% macro form_field(field) %}
    {{ field.label }}<br>
    {{ field(**kwargs) }}<br>
    {% if field.errors %}
        {% for error in field.errors %}
            <small class="error">{{ error }}</small><br>
        {% endfor %}
    {% endif %}
{% endmacro %}

这个form_field（）宏接收表单类实例的字段属性和附加的关键字参数作为输入，返回包含<label>标签、表单字段、错误消息列表的HTML表单字段代码。
使用这个宏渲染表单的示例如下所示：
{% from 'macros.html' import form_field %}
...
<form method="post">
    {{ form.csrf_token }}
    {{ form_field(form.username)}}<br>
    {{ form_field(form.password) }}<br>
    ...
</form>

在上面的代码中，我们调用form_field（）宏逐个渲染表单中的字段，只要把每一个类属性传入form_field（）宏，即可完成渲染。


1）行内验证器
除了使用WTForms提供的验证器来验证表单字段，我们还可以在表单类中定义方法来验证特定字段，如代码：
from wtforms import IntegerField, SubmitField
from wtforms.validators import ValidationError

class FortyTwoForm(FlaskForm):
    answer = IntegerField('The Number')
    submit = SubmitField()

    def validate_answer(form, field):
        if field.data != 42:
            raise ValidationError('Must be 42.')

表单类中包含以“validate_字段属性名”形式命名的方法时，在验证字段数据时会同时调用这个方法来验证对应的字段，
这也是为什么表单类的字段属性名不能以validate开头。验证方法接收两个位置参数，依次为form和field，前者为表单类实例，后者是字段对象，
我们可以通过field.data获取字段数据，这两个参数将在验证表单时被调用传入。
验证出错时抛出从wtforms.validators模块导入的ValidationError异常，传入错误消息作为参数。
因为这种方法仅用来验证特定的表单类字段，所以又称为行内验证器（in-line validator）。

2）全局验证器
如果你想要创建一个可重用的通用验证器，可以通过定义一个函数实现。
如果不需要传入参数定义验证器，那么一个和表单类中定义的验证方法完全相同的函数就足够了，如代码：
from wtforms.validators import ValidationError
def is_42(form, field):
    if field.data != 42:
        raise ValidationError('Must be 42')

class FortyTwoForm(FlaskForm):
    answer = IntegerField('The Number', validators=[is_42])
    submit = SubmitField()

当使用函数定义全局的验证器时，我们需要在定义字段时在validators列表里传入这个验证器。因为在validators列表中传入的验证器必须是可调用对象，
所以这里传入了函数对象，而不是函数调用。
这仅仅是一个简单的示例，在现实中，我们通常需要让验证器支持传入参数来对验证过程进行设置。
至少，我们应该支持message参数来设置自定义错误消息。这时验证函数应该实现成工厂函数，即返回一个可调用对象的函数，如代码：
from wtforms.validators import ValidationError

def is_42(message=None):
    if message is None:
        message = 'Must be 42.'

    def _is_42(form, field):
        if field.data != 42:
            raise ValidationError(message)

    return _is_42

class FortyTwoForm(FlaskForm):
    answer = IntegerField('The Number', validators=[is_42()])
    submit = SubmitField()

在现在的is_42（）函数中，我们创建了另一个_is_42（）函数，这个函数会被作为可调用对象返回。
is_42（）函数接收的message参数用来传入自定义错误消息，默认为None，如果没有设置就使用内置消息。
在validators列表中，这时需要传入的是对工厂函数is_42（）的调用。

8，文件上传
在HTML中，渲染一个文件上传字段只需要将<input>标签的type属性设为file，即<input type="file">。
这会在浏览器中渲染成一个文件上传字段，单击文件选择按钮会打开文件选择窗口，选择对应的文件后，被选择的文件名会显示在文件选择按钮旁边。
在服务器端，可以和普通数据一样获取上传文件数据并保存。不过我们需要考虑安全问题，文件上传漏洞也是比较流行的攻击方式。
除了常规的CSRF防范，我们还需要重点注意下面的问题：
·验证文件类型。
·验证文件大小。
·过滤文件名。

1）定义上传表单
在Python表单类中创建文件上传字段时，我们使用扩展Flask-WTF提供的FileField类，它继承WTForms提供的上传字段FileField，添加了对Flask的集成。
如下代码创建了一个包含文件上传字段的表单。
from flask_wtf.file import FileField, FileRequired, FileAllowed
class UploadForm(FlaskForm):
    photo = FileField('Upload Image', validators=[FileRequired(), FileAllowed(['jpg', 'jpeg', 'png', 'gif'])])
    submit = SubmitField()

为了便于测试，我们创建一个用来上传图片的photo字段。和其他字段类似，我们也需要对文件上传字段进行验证。
Flask-WTF在flask_wtf.file模块下提供了两个文件相关的验证器，用法说明如下：
验证器					说明
FileRequired(message=None)			验证是否包含文件对象
FileAllowed(upload_set,message=None)		用来验证文件类型，upload_set参数用来传入包含允许的文件后缀名列表

顺便说一下，Flask-WTF提供的FileAllowed是在服务器端验证上传文件，使用HTML5中的accept属性也可以在客户端实现简单的类型过滤。
这个属性接收MIME类型字符串或文件格式后缀，多个值之间使用逗号分隔，比如：
<input type="file" id="profile_pic" name="profile_pic"
    accept=".jpg, .jpeg, .png, .gif">

除了验证文件的类型，我们通常还需要对文件大小进行验证，你肯定不想让用户上传超大的文件来拖垮你的服务器。
通过设置Flask内置的配置变量MAX_CONTENT_LENGTH，我们可以限制请求报文的最大长度，单位为字节（byte）。比如，下面将最大长度限制为3M：
app.config['MAX_CONTENT_LENGTH']=3*1024*1024


需要注意的是，当表单中包含文件上传字段时（即type属性为file的input标签），需要将表单的enctype属性设为"multipart/form-data"，
这会告诉浏览器将上传数据发送到服务器，否则仅会把文件名作为表单数据提交。
<form method="post" enctype="multipart/form-data">
    {{ form.csrf_token }}
    {{ form_field(form.photo) }}
    {{ form.submit }}
</form>


3）处理上传文件
和普通的表单数据不同，当包含上传文件字段的表单提交后，上传的文件需要在请求对象的files属性（request.files）中获取。
我们在第2章介绍过，这个属性是Werkzeug提供的ImmutableMultiDict字典对象，存储字段的name键值和文件对象的映射，比如：
ImmutableMultiDict（[（'photo'，<FileStorage：u'0f913b0ff95.JPG'（'image/jpeg'）>）]）

上传的文件会被Flask解析为Werkzeug中的FileStorage对象（werkzeug.datastructures.FileStorage）。
当手动处理时，我们需要使用文件上传字段的name属性值作为键获取对应的文件对象。比如：
request.files.get（'photo'）

使用Flask-WTF时，它会自动帮我们获取对应的文件对象，这里我们仍然使用表单类属性的data属性获取上传文件。处理上传表单提交请求的upload视图如下：
import os

app.config['UPLOAD_PATH'] = os.path.join(app.root_path, 'uploads')

@app.route('/upload', methods=['GET', 'POST'])
def upload():
    form = UploadForm()
    if form.validate_on_submit():
        f = form.photo.data
        filename = random_filename(f.filename)
        f.save(os.path.join(app.config['UPLOAD_PATH'], filename))
        flash('Upload success.')
        session['filenames'] = [filename]
        return redirect(url_for('show_images'))
    return render_template('upload.html', form=form)

当表单通过验证后，我们通过form.photo.data获取存储上传文件的FileStorage对象。接下来，我们需要处理文件名，通常有三种处理方式：
（1）使用原文件名
如果能够确定文件的来源安全，可以直接使用原文件名，通过FileStorage对象的filename属性获取：
filename=f.filename

（2）使用过滤后的文件名
如果要支持用户上传文件，我们必须对文件名进行处理，因为攻击者可能会在文件名中加入恶意路径。
比如，如果恶意用户在文件名中加入表示上级目录的..（比如../../../../home/username/.bashrc或../../../etc/passwd），
那么当我们保存文件时，如果这里表示上级目录的..数量正确，就会导致服务器上的系统文件被覆盖或篡改，还有可能执行恶意脚本。
我们可以使用Werkzeug提供的secure_filename（）函数对文件名进行过滤，传递文件名作为参数，它会过滤掉所有危险字符，返回“安全的文件名”，如下所示：
>>> from werkzeug import secure_filename
>>> secure_filename('avatar!@#//#\\%$^&.jpg')
'avatar.jpg'
>>> secure_filename('avatar头像.jpg')
'avatar.jpg'

（3）统一重命名
secure_filename（）函数非常方便，它会过滤掉文件名中的非ASCII字符。但如果文件名完全由非ASCII字符组成，那么会得到一个空文件名：
>>> secure_filename('头像.jpg')
'jpg'

为了避免出现这种情况，更好的做法是使用统一的处理方式对所有上传的文件重新命名。
随机文件名有很多种方式可以生成，下面是一个使用Python内置的uuid模块生成随机文件名的random_filename（）函数：
def random_filename(filename):
    ext = os.path.splitext(filename)[1]
    new_filename = uuid.uuid4().hex + ext
    return new_filename

这个函数接收原文件名作为参数，使用内置的uuid模块中的uuid4（）方法生成新的文件名，并使用hex属性获取十六进制字符串，最后返回包含后缀的新文件名。

☆附注　UUID（Universally Unique Identifier，通用唯一识别码）是用来标识信息的128位数字，比如用作数据库表的主键。
使用标准方法生成的UUID出现重复的可能性接近0。在UUID的标准中，UUID分为5个版本，每个版本使用不同的生成方法并且适用于不同的场景。
我们使用的uuid4（）方法对应的是第4个版本：不接收参数而生成随机UUID。

在upload视图中，我们调用这个函数来获取随机文件名，传入原文件名作为参数：filename=random_filename（f.filename）

处理完文件名后，是时候将文件保存到文件系统中了。我们在form目录下创建了一个uploads文件夹，用于保存上传后的文件。
指向这个文件夹的绝对路径存储在自定义配置变量UPLOAD_PATH中：
app.config['UPLOAD_PATH']=os.path.join（app.root_path，'uploads'）

这里的路径通过app.root_path属性构造，它存储了程序实例所在脚本的绝对路径，相当于os.path.abspath（os.path.dirname（__file__））。
为了保存文件，你需要提前手动创建这个文件夹。

对FileStorage对象调用save（）方法即可保存，传入包含目标文件夹绝对路径和文件名在内的完整保存路径：
f.save（os.path.join（app.config['UPLOAD_PATH']，filename））

文件保存后，我们希望能够显示上传后的图片。为了让上传后的文件能够通过URL获取，我们还需要创建一个视图函数来返回上传后的文件，如下所示：
@app.route('/uploads/<path:filename>')
def get_file(filename):
    return send_from_directory(app.config['UPLOAD_PATH'], filename)
这个视图的作用与Flask内置的static视图类似，通过传入的文件路径返回对应的静态文件。
在这个get_file视图中，我们使用Flask提供的send_from_directory（）函数来获取文件，传入文件的路径和文件名作为参数。

提示:在get_file视图的URL规则中，filename变量使用了path转换器以支持传入包含斜线的路径字符串。

在upload视图里保存文件后，我们使用flash（）发送一个提示，将文件名保存到session中，最后重定向到show_images视图。
show_images视图返回的uploaded.html模板将从session获取文件名，渲染出上传后的图片。
代码部分截取：
flash('Upload success.')
session['filenames'] = [filename]
return redirect(url_for('show_images'))

提示　这里将filename作为列表传入session只是为了兼容下面的多文件上传示例，这两个视图使用同一个模板，使用session可以在模板中统一从session获取文件名列表。

在uploaded.html模板里，我们将传入的文件名作为URL变量，通过上面的get_file视图获取文件URL，作为<img>标签的src属性值，如下所示：
<img src="{{ url_for('get_file', filename=filename) }}">



10，使用Flask-CKEditor集成富文本编辑器
富文本编辑器即WYSIWYG（What You See Is What You Get，所见即所得）编辑器，类似于我们经常使用的文本编辑软件。
它提供一系列按钮和下拉列表来为文本设置格式，编辑状态的文本样式即最终呈现出来的样式。在Web程序中，
这种编辑器也称为HTML富文本编辑器，因为它使用HTML标签来为文本定义样式。














